Day 2 Lecture - Windows ADS and Registery

Windows Registery uses hive keys "HKEY_" to organze the registery
we can use the registery to establish persistence in a windows machine


Using the HKEY_CLASSES_ROOT key we can manipulate the registery to allow us to get through windows defender
HKEY_USER
s-1-5-18 - System
s-1-5-19 - Service
s-1-5-20 - Network

The registery resides in memory if the system loses power it won't be the same when you reboot the machine
if you are trying to establish persistance you have to store your backdoor somewhere such as ntuser.dat

Creating an Alternate Data Stream on a file
C:\windows\system32>echo social security numbers > reminder.txt:secret.info 

C:\windows\system32>dir reminder.txt 
 Directory of C:\windows\system32
 02/27/2021 07:13 PM                  23 reminder.txt
                 1 File(s)            23 bytes
                 0 Dir(s) 20,060,712,960 bytes free

C:\windows\system32>type reminder.txt 
Always try your best

Viewing an Alternate Data Stream on a file.
C:\windows\system32>more < reminder.txt:secret.info 
social security numbers

C:\windows\system32>notepad reminder.txt:secret.info 

C:\windows\system32>dir /R reminder.txt 
 Directory of C:\windows\system32
 02/27/2021 07:13 PM                   23 reminder.txt
                                       26 reminder.txt:secret.info:$DATA
                1 File(s)              23 bytes
                0 Dir(s)   20,060,557,312 bytes free

C:\windows\system32>type reminder.txt:secret.info 
The filename, directory name, or volume label syntax is incorrect.

To recursivly search for a file with Alternate Data Stream
Get-ChildItem C:\Users\CTF\ -Recurse | ForEach-Object { get-item $_.fullname -Stream * } | 
where { $_.stream -ne ':$DATA' }



Lecture Day 3 Linux------------------------------------------------------------------------------------------------------------------------------
creating a config file to enable easier SSH
create .ssh/config file
edit the file as follows:
Host linops
    HostName 10.50.28.138
    User student
    Port 22
Create an alias in bash_aliases file
alias sshlinops='ssh linops -X terminator&' - this allows you to ssh and open a terminator shell in the background
source .bashrc
Then generate an ssh key
ssh-keygen
then copy your key over 
ssh-copy-id sshlinops

Lecture start
When getting onto a machine
Where am I? hostname or uname -a
Who am I? whoami /id
What am I allowed to do? sudo -l
What's going on? w/who and ps -elf
Why is that happening? (Process Validity: later date fill in)
How is that happening? 
What's in the file? 

Machine background
/bin (/usr/bin or /usr/local/bin) - on some machines bin applications are found in /usr/bin or /usr/local/bin instead of /bin
- Binarys this is going to be a lot of the application files

/sbin (/usr/sbin) - System Binarys
- requires sudo to use these

/home - current users home directory

/usr
- some binarys
- documentations
- example files for certain applications
- catch all for any files that are used system wide

/etc - Everything that's configurable
- catch all for all of the configuration files that are system level

/var
- Things that are likely to change such as log files

/boot - Directory read at boot
- This is where the GRUB and its config files are as well as the bootloaders

/dev - devices 
- headphones
- keyboards
- mice
- data streams stdin, stdout, stderr
- where the harddrive can be found (sda)

/lib - The library
- functions are kept here.
- similar to a windows .dll

/media - removable media like a flash drive or a cd

/mnt - reserved for permeantly attachted external storage

/opt - Optional add on applications and their files

/root - Home directory for the root user

/run - runtime and variable data: mounted at boot and is designed to hold data for that instance of the system running

/tmp - Temporary files: Everyone has access to tmp, nothing stays here it is a good place for temporary sustained access

/proc - processes

Important Files------------------------------------
/etc/shadow

/etc/passwd
username:passhold:gid:uid:comments:home dir:default shell
/etc/group
Groupname:password:gid:grouplist

File Information------------------------------------
ls -lisa
reading a directory listing
permissions: filetype,user{3},group{3},others{3}

suid - when this file is executed is executed like the owner is doing it
sgid - when the file executing is ran it runs as if the group member was running it
stickybit - when the sticky bit is set only the file owner can delete the file

Python3 - CTFd

Lecture Day 4 Windows Boot Process---------------------------------------------------------------------------------

BIOS - 
MBR
 - points to the boot manager(bootmgr)
   bootmgr allows you to pick how you want the system to boot
Windows Boot Manager
 - Points to the Boot Configuration Data Store (BCD)
BCD
 - Points to the OS loader
OS Loader
 - winload.exe
      - Like a cold start. It takes the operating system longer to get started
      - However Windows10 has an option auto selected called fast boot that uses winresume however with this option selected it only 
        stores the OS's state nothing else. It is like a glorified sleep state. There is a downside to this winexplorer i.e. the file
        system needs to turn all the way off in order to be effecient.
 -winresume.exe
      -winresume.exe is used for hibernation. It takes the state of ram (everything thats going on at the time) and writes it to a file
       doing this allows the system to read the .sys file that the ram state was stored in. Allows for a faster boot up and restores where you are


UEFI

GPT - GUID Partition Table
 - UEFI doesn't check for the GPT it checks with the bootmgrfw.efi to see if the GPT exists and if so where it is. 

UEFI Boot Manager
 - Tells UEFI where to find the GPT as well as where the BCD is.
 
BootLoader
-BIOS
  - NTLDR.exe was used for Kernel 5 which was windows 7 however boot.ini which is used with this is editable in a text editor making this very unsecure.
  - Bootmgr.exe is for Kernel 6+ 
-UEFI
  - Bootmgrfw.efi is Kernel 6+, UEFI requires at least kernel 6 to be used 

Kernels
-Legacy Kernel 5 (Boot.ini)
    - Boots straight to NTOSKRNL
-Kernel 6+ (BCD)
    - Goes to Winload.exe/Winresume.exe or Winload.efi/Winresume.efi then onto the NTOSKRNL
    

NTOSKRNL
- Loads the following: Pagefile.sys, Loads Device Drivers, Load directory Hive, HAL.dll, and Process Manager; Process Manager launches System Idle Process
- It also starts SMSS.exe (Master sessions Manager)

SMSS.exe - relies on a dll called terminal services.
- Launches two sessions to start its process
    - Session 0 (This is system level privilieges)
        - Launches CSRSS.exe(Session 0)
        - Also launches WININT.exe(Session 0)
            - WININT launches the following in session 0
                - LSASS.exe
                - SVCHOST.exe
    - Session 1 (This is user level privilieges)
        - Launches CSRSS.exe (Session 1)
        - WINLOGON.exe(Session 1)
            - WINLOGON launches the following in Session 1
                - LOGONUI.exe
                - USERINIT.exe
                    - USERINIT also launches Explorer.exe once explorer.exe is launched USERINT kills itself
                        - Explorer.exe is what we interface with when using the windows system


BDCEDIT
from cmd
    - Type C:\Windows\Panther\setupact.log | findstr /i "detect boot enviroment"
    - We can also bcdedit | findstr /i winload or winresume
        - If we see one or the other we can see how the system was started
    - You can also use the GUI msinfo32
- When using bcdedit command when looking for the active boot information you need to look for the identifier with the value {current}. Everything else is slightly irrelevant but can be useful. 
bcdedit /set safeboot minimal - a basic command line interface. Only thing that starts is the bare minimum
/set safeboot Networking - Basic cli but you have access to network resources.
/set safebootalternateshell yes - allows you to use shells other than cmd and powershell.
ncdedit /deletevalue safeboot - deleteing these values restores the ability to have a standard launch
bcdedit /deletevalue safebootalternateshell

Easier -
msconfig gui 
you can edit your boot settings from an interactive gui



Lecture Day 5 Linux Boot Process------------------------------------------------------------------------
Differences between BIOS and UEFI 
UEFI Boots much faster than BIOS especially for Windows Machines
UEFI Firmware us usually loaded into flash memory or EEPROM, making it easier to update and patch
UEFI offers Secured Boot mode which only allows verified drivers to load
UEFI offers drive support of up to 9 zettabytes while BIOS os 2 terabytes

Good Commands - 
rsyslogd
dmidecode
lsblk
df -h (What is mounted and where as well as how much space they have)
sudo xxd -l 512 -g 1 (this will allow you to view the entire disk)
    - The mbr will always have a eb63 at the begining of the hex string when you run the above command
      the 63 tells the file system to jump to memory position 63
    - The last 66 bytes are ... and the last two bytes should always be 55AA or AA55
sudo parted -l (This will give information about the MBR as well)
sudo dd if=/dev/sda of=mbrcopy bs=1 count=512 (This will allow you to make a copy of the mbr)
to view the copy you need to use xxd

Big Mike Got Killed In Russia
BIOS - Basic Input Output System
MBR - Master Boot Record
GRUB - Grand Unified Bootloader
KERNEL
Init (SysV or SystemD)
RunLevels


Systemd
Bios - also refered to as boot firmware loads and runs a boot loader
 - First program to run on startup
     - If stored in flash memory -> becomes a target for BIOS Rootkits
 - Performs POST(Power on self test)
 - Performs system integrity check
 - Builds a device tree(mice,keyboard,hard drive, video cards, etc.)
 - Reads and executes the first sector on the boot disk(MBR)
MBR(Master Boot Record) -BIOS runs bootstrap code in MBR Firmware executes the UEFI executables and pass                            control to the GRUB
 - finds the kernel image on disk, loads it into memory and starts it.
 - 
 - 
 - 
 - 
GRUB(Grand Unified Bootloader) - 
  
 - Configuration file /boot/grub/grub.cfg
 -   GRUB menu allows your to pick which OS you want to load
        Can use this to get into single user mode on older systems
cat /boot/grub/grub.cfg (can be used to view the Grub config file i.e. Kernel location)
  
Kernel - executes /sbin/init
 - initiliazes device drivers
 - mounts the root filesystem
 - starts a program called init with a PID of 1. This point is the user start
 - Manages the interactions between the OS and the hardware
 - Supports Modules
    - lsmod (command to view the support modules)
  - Hardcoded to Execute /sbin/init 
 
 
Init(SystemD) - executes runlevel programs
 - sets the rest of the system processes in motion via pre-configured runlevels
 - Target Units
    - cat /etc/inittab
 - /etc/inet.d
    - S and K files (S: Start K: Kill)
 - 
Default Target - 
 - 
 - 
 - 
 - 


SysV/System 5
BIOS - Executes the MBR
MBR - Executes the GRUB
GRUB - Executes the Kernel
Kernel - Executes /sbin/init
Init - Executes runlevel programs
Runlevel - executed from /etc/rc.d/rc*.d


Day 6 Windows Process Validation--------------------------------------------------------


60% of all forensics on exploited machines is process validity

 - tasklist
 - get-process

Discovering hidden processes, services, and finding normal and abnormal
activity in PS
 - How do we discover normal,abnormal,and hidden processes and services
     - Get-process SMSS,CSRSS,LSASS | sort -property Id
 - Do boot processes have descriptions
     - Get-Process | select-object Name,Id,Description | sort-object -property Id
 - Where do the system processes and services normally run from (C:\Windows\System32)
     - Get-Process | Select-Object Name,Id,Path
     - Get-Ciminstance Win32_service | Select-Object Name,Processid,Pathname
 - View Modules/DLLs used by defined processes and their file locations
     - Get-Process | foreach {$a} {$_.modules} | more
     - Get-Process -name "*chrome*" | select-object -ExpandProperty Modules | more
 - View only modules/DLLs used by a certain exe in the name and their file location
     - Get-Process Chrome | foreach {$a} {$_.modules} | Where-Object ModuleName -like "*chrome*"
       | more | ft -wrap
     - Get-Process -Name "*chrome*" | select-object -ExpandProperty Modules |
       Where-Object ModuleName -like '*chrome*' | more | ft -wrap
 - View process by priority levels of process importance
     - Get-Process | Select Name,Priorityclass
     - Tasklist /m
 Viewing Process with CMD
     - tasklist
  - Display verbose task info
     - tasklist /v
  - display without trunication
     - tasklist /svc
  - display modules/dlls associated to all processes
     - tasklist /m | more
  - display modules/dlls associated with a to a specific process
     - tasklist /m /fi "IMAGENAME -eq chrome.exe"
  - formating options
     - tasklist /fo:{table|list|csv}
  - filtering for a specific string/process
     - tasklist /fi "IMAGENAME eq lsass.exe"
  Viewing Processes via GUI
  - Task Manager (taskmgr.exe)
  - Process Explorer (procexp.exe)
  
 How to View Services
 
 Viewing services with Powershell
 - Get-Ciminstance
 - Get-Service
 - svchost
 - Get-WMIobject ********most info
 
 - View only system services and display Name,PID,and the path
    - Get-Ciminstance Win32_service | select Name,Processid,Pathname | more | ft -wrap
 - View all services
    - Get-service
 - view a defined service showing all properties in list format
    - get-service ALG | format-list *
 view only currently running services
    - Get-Service | Where-Object {$_.status -eq "Running"}
    
Viewing services with CMD
 - View all services
    - sc query
 - View extended info for all services
    - sc queryex type=service
 - View extended info for all inactive services
    - sc queryex type=service state=inactive
 - Additional examples
    - sc /?                     # Basic service enumeration
    - sc qc                     # Configuration information for a service
    - sc queryex eventlog       # Information for the eventlog service including PID
    - sc qdescription eventlog  # Query eventlog service description
    - sc qc eventlog            # Show the binary command that loads the service
    - sc showsid eventlog       # Displays the service sid and status
    - sc enmudepend             # Lists the services that cannot run unless the specified service
                                  is running

 - View all currently running services
    - net start
 Viewing services in GUI
    - services.msc
    - psservice
       - Sysinternal tool
 
Scheduled Tasks

 - What are scheduled tasks
    - Schedule the launch of programs or scripts when defined conditions are met such as:
       - Pre-set time
       - when the local machine is booted
       - when a user logs on
    - Easy way to hide malware and have itself set to execute at set times
       - Seperate file can be run from schedule tasks that calls the malware like a script
    - Good way to establish persistence
 - How to view scheduled tasks
 - Viewing in Powershell
    - View all properties of the first scheduled task
       - Get-ScheduledTask | select * | select -first 1
    - Powershell uses encoded strings to conceal the task to run
       - We can use tools such as cyberchef to decode these
 - Viewing in CMD
    - schtasks /query /tn "IchBinBosh" /v /fo list
 - Viewing via GUI
    - Task Scheduler
 
 - Autorun Registery Locatioms
    - Registery Key Locations
       - HKLM\Software\Microsoft\Windows\CurrentVerstion\Run - Local Machine
       - HKLM\Software\Microsoft\Windows\CurrentVerstion\RunOnce
       - HKLM\System\CurrentControlSet\Services
    - User specific autoruns
       - HKCU\Software\Microsoft\Windows\CurrentVerstion\Run - Current User
       - HKCU\Software\Microsoft\Windows\CurrentVerstion\RunOnce
       - HKU\<sid>\Software\Microsoft\Windows\CurrentVerstion\Run - Specific User
       - HKU\<sid>\Software\Microsoft\Windows\CurrentVerstion\RunOnce
    - The order in which services are loaded and can be adjusted
       - HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\ServiceGroupOrder
       - HKEY_LOCAL_MACHINE\CurrentControlSet\Control\GroupOrderList

View Network Connections
- Viewing Network Connections via powershell
   - Show all Connections in the 'established' state
      - Get-NetTCPConnection -State Established
- View Network Connections via CMD
   - Show netstat help
      - netstat /?
         -a   # Display all connections and listening ports
         -n   # Display address and port numbers in numerical form
         -o   # Displays the owning PID associated with each connection
         -b   # Displays the executable involved in creating each connection
   - Displays all TCP/UDP connections with ports in numerical form with PID and executable
     associated to the connections
      - netstat -anob | more
Windows Sysinternals
   - Using PROCMON to monitor the Windows Boot Process
   
User Access Controls



Day 7 Linux Process Validity------------------------------------------------------------

Processes are running applications
 - There are two primary processes after startup
    - For kernel space processes [kthread] ( PID = 2 )
    - For user-space processes /sbin/init ( PID = 1 )
 - All kernel process are fork()ed from [kthread] and all user
   process are fork()ed from sbin/init or direct ancestor
 - Kernel processes typically are used to manage hardware, are
   directly handled by the kernel, have their own memory space, and
   have a high priority
  - They can be identified by the name enclosed in square brackets []
    (using the -f option) kthread spawned processes will have a PPID of 2
 - To view running processes
    - ps -elf
       - -n = not option
       - -e = everything
       - --forest allows you to view the trees of processes
       - --context used with grep allows you to see a certain amount of lines
           above and below
       
    - top
       - shift + v = allows you to view parent and child processes
    - htop
       - fucking dope
       
Process Ownership
 - A user is an entity that can run processes and own files
 - Users may be
    - Human Users = people who are logged on
    - System Users = used to start no interactive background services such as databases
 - UserIDs are set by the type of user account
    - 100-999 = System User profiles
    - 1000 - 60000 = Human User profiles
 - EUIDS vs RUIDS
    - EUIDS define the access right for a process: describes the user whose file access
      permissions are by the process
    - RUIDS define who you really are: defines who can interact with the running process
      which user can kill and send signals to a process.

System Calls
 - process control
    - fork()
    - exit()
    - wait()
 - File manipulation
    - open()
    - read()
    - write()
 - Device manipulation
    - ioctl()
    - read()
    - write()
 - Information Maintenance
    - getpid()
    - alarm()
    - sleep()


Foreground and Background Processes
 - Orphan Process
    - disown -a && exit = close a shell and force all children to be adopted
    - All daemons are orphans but not all orphans are daemons
    - If the process is a orphan it should be adopted by init or systemd
 - Zombie Process
    - The process finished but the parent never picked it back up
      therefore the process stays alive until the parent is killed
    - Represented by a Z in the S field
    
Daemons
 - What is a daemon and how are they created
    - Program that runs as a background process (syslogd,sshd,cron)
    - All daemons are orphans but all orphans are not daemons
    - A daemons purpose is to manage/monitor a service
    - Daemons can be used to create persistance 
 - Interacting with the system
    - SysV is system
    - Systemd is systemctl

Job Control
 - Job control is the ability to stop/suspend the execution of a process and continue
 /resume their execution as per your requirements.
   - Stop Process = SIGSTOP(19) (pause signal, let’s you continue later, 
                    does not kill process)
   - End Process = SIGTERM(15) (termination signal, the right way, the application can intercept 
                   this signal and initiate shutdown tasks such as temp file cleanup)
   - Kill Process = SIGKILL(9) (kill signal, extreme, only use if 
                    SIGTERM doesn’t work, won’t initiate shutdown task

Cron Jobs
 - Executes a task at a specific time i.e. auto system maintenance
 - cron directories
    - /var/spool/cron
    - /etc/cron.d - sysem cron jobs
    - /etc/crontab - system cron jobs
 - Two Types of cron jobs
    - System cron jobs
       - run as root and rigidly scheduled
       - perform system-wide maintenance
       - stored in /etc/crontab
    - User cron jobs
       - Use 'crontab' command to create user cron jobs
       - stored in /var/spool/cron/crontabs/
    - Any program can be run with cron at whatever time they want
    - The crontab command opens the cron table from editing. The cron table
      is the list of tasks scheduled to run at regular time intervals on the system
       - crontab -u [user] file # This will load the crontab data from the specified file
       - crontab -l -u [user] # this will disply/list user's crontab contents
       - crontab -r -u [user] # this will remove users crontab contents
       - crontab -e -u [user] # this will edit user's crontab contents

Processes and Proc Dir
 - File Descriptors
 - a file descriptor(FD,less frequently fildes) is a unique identifer(handle) for a file 
   or other input/output resource, such as a pipe or network socket
 - When you open a file the operating system creates an entry to represent that file and
   store the information about that opened file.
 - Viewing File Descriptors
    - View file descriptors using the LSOF command
    - List all open files being used by every process
       - sudo lsof | tail -30
    - List all open files for a specific process
       - sudo lsof -c sshd
 - Navigating Proc Directory
    - List all the proc directories
       - ls -l /proc/
    - Grab the PID of a process
       - ps -elf | grep sshd
    - List contents for that PID directory
       - sudo ls -l /proc/14139
 
Could be useful:
sudo systemctl list-units --all -t service 
sudo systemctl list-units --all -t timer 
sudo lsof -i -P -n (view port connections with pids)      


Day 8 Windows Auditing and Logging---------------------------------------------------------

Windows Artifacts
 - UserAssist
 - Windows Background Activity Moderator
 - Recycle Bin
 - Prefetch
 - Jump Lists
 - Recent Files
 - Browser Artifacts
 
 - Getting user SID
    - Many artifacts require a SID
       - get-wmiobject win32_useraccount | select name,sid (powershell)
       - get-localuser | select name,sid (powershell)
       - wmic useraccount get name,sid (cmd.exe only)
 
 - The UserAssist registery key tracks the gui-based programs that
   are ran by a particular user
    - View exe files run
       - Get-ItemProperty 'REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows
         \CurrentVersion\Explorer\UserAssist\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\Count'         
    - View Shortcut files executed
       - Get-ItemProperty 'REGISTRY::HKEY_USERS\*\SOFTWARE\Microsoft\Windows
         \CurrentVersion\Explorer\UserAssist\{F4E57C4B-2036-45F0-A9AB-443BCFE33D9F}\Count'
 
 - W(BAM): BAM is a Windows service that Controls activity of background applications
    - Get-Itemproperty 'HKLM:\SYSTEM\CurrentControlSet\Services\bam\UserSettings\*' (Windows 1709 & 1803)
    - Get-Itemproperty 'HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\UserSettings\*' (Windows 1809 and newer)
    - If you see a real file path that is a red flag 
 
 - Recycle Bin
    - gci 'C:\$RECYCLE.BIN' -Recurse -Verbose -Force | select *
    - gci 'C:\$RECYCLE.BIN' -Recurse -Force
    - Get-Childitem 'C:\$Recycle.Bin' -Force -Recurse | foreach-object 
      { if ($_.extension) -like ".txt"{ if ($_.name -like "'$R'") { write-host $_.name -nonewline;
      write-host "--->" -foregroundcolor Green -nonewline; get-content $_.fullname } } }
 
 - Prefetch: files are created by the windows os when an application is run 
             from a specific location for the first time
    - gci -Path 'C:\Windows\Prefetch' -ErrorAction Continue | select * | select -first 5
 
 - Jump Lists: win7-10 taskbar is enginered to allow user to jump to recently used apps
    - gci -Recurse C:\Users\*\AppData\Roaming\Microsoft\Windows\Recent 
          -ErrorAction Continue | select FullName, LastAccessTime
 
 - Recent Files: registery key tracks recently opened files (last 150 files or folders)
    - List files in Recent Docs
       - gci 'REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion
              \Explorer\RecentDocs'
    - Convert File Hex to unicode
       - [System.Text.Encoding]::Unicode.GetString((gp "REGISTRY::HKEY_USERS\*\SOFTWARE
          \Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\.txt")."0")
    - Convert all of a users values from HEX to unicode
       - Get-Item "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion
         \Explorer\RecentDocs\.txt" | select -Expand property | ForEach-Object 
         { [System.Text.Encoding]::Default.GetString((Get-ItemProperty -Path 
         "REGISTRY::HKEY_USERS\*\Software\Microsoft\Windows\CurrentVersion\Explorer
         \RecentDocs\.txt" -Name $_).$_)}
 
 - Browser Artifacts: Stores details for each user account
    - History will record the access to te file on the website that was accessed via link
       - .\strings.exe 'C:\Users\<username>\AppData\Local\Google\
          Chrome\User Data\Default\History'
    - Find FQDNs in Sqlite Text Files
       - $History = (Get-Content 'C:\users\<username>\AppData\Local\Google\Chrome\User Data\
         Default\History') -replace "[^a-zA-Z0-9\.\:\/]",""
       - $History| Select-String -Pattern "(https|http):\/\/[a-zA-Z_0-9]+\.\w+[\.]?\w+" 
         -AllMatches | foreach {$_.Matches.Groups[0].Value}| ft
         
Windows Auditing
 -  Functionality of the main logs
    - At startup, LSASS sends the system audit policy to the Security Reference Monitor (SRM)
    - When an object is accessed, SRM generates auditing messages and sends them to LSASS
    - LSASS sends the event log messages on to the event logger
 - Application - Contains events logged by applications
 - Security - Contains events such as valid/invalid logon attempts and other events related to
              resource use like creating,opening, or deleting files
 - System - Contains events logged by system components, such as driver failures other system
            component to load during startup
 - CustomLog - Contains events logged by applications that create a custom log. Using a custom 
               log enables an application to control the size of the log or attach ACLs for
               security purposes without affecting other applications
 - Configure Audit Policy
    - View entire auditpol
       - auditpol /get /catagory:*
    - Set file system subcatagory to audit
       - auditpol /set /subcatagory:"File System"
    - Remove file system subcatagory auditing
       - auditpol /set /subcatagory:"File System" /success:disable
    - To list the global object access auditing entries set on files or folders
       - auditpol /resourceSACL /type:File /new
    - To list the global object access auditing entries set on Registry Keys
       - auditpol /resourceSACL /type:Key /view
 - View/Analyze eventlogs - GUI
    - eventvwr
       - Located in C:\Windows\System32\Winevt
       - Locations are configurable
 - View/Analyze event logs - CLI
    - Show all logs
       - wevtutil el
    - get log info
       - wevtutil gli security
    - get last 3 events
       - wevtutil qe security /c:3 /f:text
 - View/Analyze event logs - Powershell
    - view newest 10 system logs
       - get-eventlog -logname system -newest 10
    - view the entire message field in the security log
       - get-eventlog -logname security -message "*remote*"| ft -wrap
    - Search logs with multiple criteria
       - get-winevent -filterhashtable @{logname="security";id="4624"} | select -first 5 | ft -wrap
 - Event IDS to search for malicous actors
    - User added to privileged group
       - 4728, 4732, 4756
    - security-enabled group modification
       - 4735
    - Successful/Failed user account login
       - 4624, 4625
 - Powershell Transcript
    - Allows the capture of input and output of windows powershell commands into text based scripts
       - Start-Transcript
    - View powershell console history
       - Get-History
    - View entire powershell history
       - Get-Content "C:\user\$env:username\AppData\Roaming\Microsoft\Windows\Powershell
                     \PSReadline\ConsoleHost_history.txt"
       
Day 9 Linux Auditing and Logging--------------------------------------------------------------------------
Pros of Linux Logging
 - Remote logging
    - Main system crashes
    - Becomes compromised
 - Historical Analysis
    - Record of anomalous activity
    - Diagnostics of a failure
Cons of Linux Logging
 - Logs can be cryptic
 - Logging is not free
 - Logging too much/little
 - Not analyzing logs
 - not looking at the right logs
 - Time normalization
 - confirmation of critical systems usage
 
Log Types 1
 - Authentication
   - /var/log/auth.log # Authentication related events
   - /var/run/utmp     # Users currently logged in
   - /var/log/wtmp     # History file for utmp
   - /var/log/btmp     # failed login attempts
- Application
   - apache - Web Server (dir)
   - apt - Package Manager (dir)
   - /var/log/mysql.log
- System
   - /var/log/messages # Legacy Catch all
   - var/log/syslog    # Ubuntu/Debian catch all
   - dmesg = Device Messenger (queries /proc/kmsg)
      - Kernel ring buffer - never fills
      - First logs generated by the system
      
- Logging at a glance
   - Location: /var/log
   - Config file: /etc/rsyslog.conf
   - Service: /usr/sbin/rsyslogd
- Logging Daemon
   - /usr/sbin/rsyslogd
      - User Space daemon - reads messages written to /dev/log and
                            formats and stores them based on /etc/rsyslog.conf
         - syslog() via libc
         - kernel ring buffer
         - audit records via audit subsystem (auditd)
- Facility Codes
   - 0 kernel messages
   - 1 user-level
   - 2 mail system
   - 3 system daemons
   - 4 security/authorization messages
   - 5 messages generated internally by syslogd
   - 6 line printer subsystem
   - 7 network news subsystem
   - ...
- Severity Codes
   - 0 emerg, panic: Emergency: system is unusable
   - 1 alert: Action must be taken immediately
   - 2 crit: Critical conditions
   - 3 err: Error conditions
   - 4 warn: Warning conditions
   - 5 notice: Normal but significant condition
   - 6 info: Informational messages
   - 7 Debug: debug-level messages
   
   @@ = remote logging is happening. This is seen when viewing /etc/rsyslog.conf


Log Enumeration/Management
 - Best Practices
    - Meaningful name schema
    - Seperate logs logically and by precedence
    - sync time across network
    - control log access
 - Utilize cron jobs / scripts
    - log rotate
       - /etc/logrotate.conf
       - how large to let files get. How long to keep them
 - Useful logging commands
    - tail -f : continuously show end of file
    - less /var/log/syslog : view log in page viewer
    - logger : send a user generated message to system log i.e. Starting update
    - > /var/log/messages : wipes logs
       - why do this as opposed to deleting/recreating files
    - last -f /var/log/{wtmp,btmp} : needed to view data files
    - journalctl : very powerful tool with a pluthera of options
    - JSON : another tool that can be used for parsing through large log files
             can use tools such as Splunk to help iterate through JSON dumps
 
 - Auditing vs logging
    - Logging is system/application defined
    - auditing is user defined
    - [kauditd] : runs at kernel level and can monitor individual syscalls (/sbin/auditd)
    - auditctl - control/config command
    - aureport : summary reports of audit logs
    - ausearch : query audit logs
    
Day 10 Memory Analysis---------------------------------------------------------------------------

 - Volatile Memory
    - Non-persistent
    - Requires power to maintain the stored information; it retains its contents
      while powered on but when the power is interrupted, the stored data is immediately lost
       - RAM
 - Non-Volatile Memory
    - Persistent
    - Does not require continues power
       - HDD
       - USB
       - SSD
 - Memory Analysis
    - Analyzing the systems RAM to determine information about running programs, the operating system,
      and overall state of a computer
 - Order of Volatility
    - 1. CPU registers, cache
    - 2. Routing table, ARP cache, process table,kernel stats, memory
    - 3. Temp file systems
    - 4. Disk
    - 5. Remote logging and monitoring data
    - 6. Physical configuration, network topology
    - 7. Archival media - backups
 - Volatility
    - Memory analysis framework
    - Volatility provides cross platform solutions on Windows,Mac,OSX, and Linux
    - Each OS has its own memory acquisition tool called Persistent Memory (pmem)
       - Linpmem
       - Winpmem
       - OSXpmem
 - Installing Volatility
    - Python
       - Download python < 3.0
          - click "Add python to path"
       - Download Volatility from git
       - Run install: setup.py install
       - Required Dependencies
          - diStorm3
             - click "distorm3-3.3.4.win-amd64.exe"
          - Visual C++ Compiler
          - pyCrypto or python -m pip install pycrypto
          - Yara for python 2.7
          - openpyxl: python -m pip install oenpyxl
          - ujson: python -m pip install ujson
    - Or download Volatility 2.6 standalone
 - Python
    - Pros
       - Updated frequently
       - All profiles available
    - Cons
       - Lengthy install
       - Can't run without python install
 - Standalone
    - Pros
       - No install needed
       - Quick and easy to download and run
       - can run without Python
    - Cons
       - Not all profiles are included
       - Not updated frequently
 - Using volatility
    - -f # for filename
    - --profile=WinXPSP2x86
       - imageinfo # set profile
       - can use --info to see available profiles
       - pslist
       - pstree
       - connections
       - connscan
       - -f (filename) --profile=WinXPSP2x86 procdump -p (pid) -D (dir) 
                         {this can be used to search for more info on a process via process id}
       - f (filename) --profile=WinXPSP2x86 memdump -p (pid) -D (dir) 
                         {this can be used to search for more info on a process memory dump via process id}
    - 
          



Evil Two
[   11.772400] systemd[1]: /lib/systemd/system/vestrisecreta.service:6: Ignoring unknown escape sequence
s: "find /home -name \*.txt -exec cp {} /tmp \;"

















































































































