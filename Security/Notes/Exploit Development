 - Buffer Oveflow Common Terms
    - Heap - Memory that can be allocated and deallocated
    - Stack - A contigous section of memory used for passing arguments
    - Registers - Storage elements as close as possible to the central processing unit (CPU)
    - Instruction Pointer (IP) - a.k.a. Program Counter (PC), contains the address of next instruction to be executed
    - Stack Pointer (SP) - Contains the address of the next available space on the stack
    - Base Pointer (BP) - The base of the stack
    - Function - Code that is separate from the main program that is often used to replace code that repeats in order to make the program
                 smaller and more efficent
    - Shellcode - The code that is executed once an exploit successfully takes advantage of a vulnerability
 - Buffer Overflow Defenses
    - Non executable (NX) stack - 
    - Address Space Layout Randomization (ASLR) - 
    - Data Execution Prevention (DEP) - 
    - Stack Canaries - 
    - Position Independent Executable (PIE) - 
 - Technical Help
    - Utilizing tools such as:
       - IDA,GHIDRA
       - GDB,MONA,IMMUNITY
       - BASH,PYTHON
 - GDB Uses
    - Installation of Peda Plugin
       - git clone https://github.com/longld/peda.git ~/peda
         echo "source ~/peda/peda.py" >> ~/.gdbinit
    - Common Commands
       - disass <FUNCTION>   #   Disassemble portion of the program
       - info <...>  #   Supply info for specific stack areas
       - x/256c $<REGISTER>  #   Read characters from specific register
       - break <address>  #   Establish a break point
 - Demo
    - gdb func
    - analyze for vulnerabilities (pdisass main)
    - run - executes the program
    - Look at the EIP
    - Utilize wiremask.eu to figure out the offset of the EIP
    - build a python script to match the eip
    - run <<< $(python /home/student/secutiry/demoexploit.py)
    - the triple carrot is only used when user input is needed.
      If it requires a parameter the triple carrots are not needed.
    - The program will have a lot of empty overhead
    - Process to verify that we can jmp to the top of the pointer
       - Looking for valid jmp esp
       - run "env - gdb" to run gdb without peda
       - show env
       - clear out whatever is in there
       - show env (verify it's clear)
       - file "target file name"
       - run
       - info proc map
       - look for a valid jmp esp
       - find /b (start addr from right below heap), (end addr from right above the stack), 0xff(jmp), 0xe4(esp)
       - go to the middle of the output and grab a handul of the address 
       - copy the address to python script in a multiline comment
       - comment out old eip
       - create new eip with one of the copied addresses
       - reverse the byte order of the address to change it to little endian
       - put in a nop sled to give the shellcode a landing pad
       - create an msfvenom payload "msfvenom -p linux/x86/exec CMD="/bin/whoami" -b "\x00" -f python"
       - the output will be the shellcode, copy from the output(buf to buf) and copy to the python script
       - ensure the print statement is good to go
       - start testing
       - if doesn't work change the nop and try again
       - change the payload and try again
       - change the eip
    
    
    
    
